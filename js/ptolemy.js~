//build a namespace for this
var ptolemy = ptolemy || {};

//host name
//changes based on deployment location
ptolemy.host = "";

//load the addresses into javascript memory
ptolemy.buildingAddrUri = ptolemy.host + "php/buildings.php";
ptolemy.lotAddrUri = ptolemy.host + "php/parking.php";
ptolemy.filteredRoutes = ptolemy.host + "php/filteredPaths.php";
ptolemy.idealParkingUri = ptolemy.host + "php/idealParking.php";
ptolemy.highwayExits = ptolemy.host + "php/highwayExits.php";
ptolemy.postExitSteps = ptolemy.host + "php/postExitSteps.php";

//variables needed by google maps
ptolemy.directionsDisplay;
ptolemy.profitsDisplay;
ptolemy.walkingDisplay;
ptolemy.directionsService = new google.maps.DirectionsService();
ptolemy.map;
ptolemy.stepDisplay;
ptolemy.markerArray = [];
ptolemy.control;
ptolemy.oms; //spiderfier for markers

//extra optional variables user can input
ptolemy.closeLotOpt = $("#closeLotOpt");
ptolemy.goButton = $("#goButton");

//extra global variables required for alternative lots
ptolemy.alternativeLots = null;

//function fills the endpoints from database
ptolemy.fillEndpoints = function() {
	var endpoints = ptolemy.getBuildingAddress();
	$.each(endpoints, function(key, val) {
	  var option = "<option value=\"" + val["latitude"] + ","+ val["longitude"] +"\" data-pic-uri=\""+ val["bldg_pic"] +"\">" + val["name"] + "</option>";
	  $('#end').append(option);
	});
};

ptolemy.clearMarkers = function() {
	// console.log("clearing markers");
	//clear the markers array
	// First, remove any existing markers from the map.
	for (var i = 0; i < ptolemy.markerArray.length; i++) {
    	ptolemy.markerArray[i].setMap(null);
  	}
  	// Now, clear the array itself.
  	ptolemy.markerArray.length = 0;
  	ptolemy.markerArray = [];	
};

ptolemy.initialize = function() {
	//fill the endpoints first
	ptolemy.fillEndpoints();

	//hide directions panel until user inputs data
	$('#directions-panel').hide();

	ptolemy.directionsDisplay = new google.maps.DirectionsRenderer({
		suppressMarkers: true,
		polylineOptions: {
	      strokeColor: "red"
	    }
	});

	ptolemy.walkingDisplay = new google.maps.DirectionsRenderer();

	var akron = new google.maps.LatLng(41.0768169,-81.5106625);

	var mapOptions = {
		zoom:16,
		center: akron
		};

	ptolemy.map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

	//spiderfier
	ptolemy.oms = new OverlappingMarkerSpiderfier(ptolemy.map);
	
	ptolemy.directionsDisplay.setMap(ptolemy.map);
	ptolemy.walkingDisplay.setMap(ptolemy.map);
	
	ptolemy.directionsDisplay.setPanel(document.getElementById('driving-panel'));
	ptolemy.walkingDisplay.setPanel(document.getElementById('walking-panel'));

	// Instantiate an info window to hold step text.
  	ptolemy.stepDisplay = new google.maps.InfoWindow();

  	ptolemy.oms.addListener('click', function(marker, event) {
	  ptolemy.stepDisplay.setContent(marker.desc);
	  ptolemy.stepDisplay.open(map, marker);
	});
  	
  	//mess with the control positioning
  	ptolemy.control = document.getElementById('control');
	control.style.display = 'block';
	ptolemy.map.controls[google.maps.ControlPosition.TOP_LEFT].push(ptolemy.control);
};

ptolemy.calcRoute = function() {

	//unhide directions panel
	$('#directions-panel').show();

	var start = document.getElementById('start').value;
	var end = document.getElementById('end').value;
	var hasPermit = document.getElementById('has-permit').checked;
	console.log("Has permit: " + hasPermit);

	//show a picture if there is one
	var pic_name = $('#end option:selected').attr('data-pic-uri');
	var pic_uri = "https://maps.uakron.edu/img/" + pic_name;
	if(pic_name != 'null')
		$('#dest-pic').html("<img src=\"" + pic_uri + "\">");
	else
		$('#dest-pic').html("");

	//clear any existing markers
	ptolemy.clearMarkers();

	//parse into google latlng objects
	var endSplit = end.split(',');
	var endLatLng = new google.maps.LatLng(endSplit[0], endSplit[1]);
	
	var bldgName = $('#end option:selected').text();
	var lot = ptolemy.getIdealParking(bldgName, hasPermit);
	var idealLotAddr = null;
	//if we cant find a lot guide them to the building and let them figure it out
	if(lot.length != 0) {
		idealLotAddr = new google.maps.LatLng(lot[0]["Latitude"], lot[0]["Longitude"]);
		console.log("Use meter: " + lot[0]["Meter"]);
		if(lot[0]["Meter"] === "1") {
			$('#driving-comments').text("*Use the meter in the lot");
		}
		else {
			$('#driving-comments').text("");
		}
	}
	else {
		idealLotAddr = endLatLng;
		$('#driving-comments').text("");
	}

	var request = {
    	origin:start,
    	destination: idealLotAddr,
    	provideRouteAlternatives: false,
    	travelMode: google.maps.TravelMode.DRIVING
	};

	ptolemy.directionsService.route(request, function(response, status) {
    	if (status == google.maps.DirectionsStatus.OK) {
    		//detect which highway exit was used
    		var exit = ptolemy.detectHighwayExit(response);
    		//modify the route based on transit data
    		ptolemy.profitsRoute(start, idealLotAddr, response, exit);
    		//calculate the walking path from lot to destination
    		ptolemy.calcWalkPath(idealLotAddr, endLatLng);
    	}
    	if(status == google.maps.DirectionsStatus.OVER_QUERY_LIMIT) {
    		alert("Service experience heavy traffic. Please try again in a few seconds");
    	}
	});

	//mark the beginning
	ptolemy.codeAddress(start, 'A');
	//mark the end
	var endmarker = new google.maps.Marker(
    {
      map: ptolemy.map,
      position: endLatLng,
      icon: "https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=" + 'B' + "|ff0000|000000"
    });
    // ptolemy.streetView(endmarker);
    ptolemy.markerArray.push(endmarker);

	//mark the lot
	var lotmarker = new google.maps.Marker(
    {
      map: ptolemy.map,
      position: idealLotAddr,
      icon: "https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=" + 'P' + "|0000ff|000000"
    });
    // ptolemy.streetView(lotmarker);
    ptolemy.markerArray.push(lotmarker);
	// Lot.distance = 10000;
	// Lot.address = "";
	// Lot.distanceText = "";

	// ptolemy.getNearestParking(end);

	// var breakWait = function() {

	// 	console.log(ptolemy.closestLot.address);

	// 	var request = {
	//     	origin:start,
	//     	destination: ptolemy.closestLot.address,
	//     	provideRouteAlternatives: true,
	//     	travelMode: google.maps.TravelMode.DRIVING
	// 	};

	// 	ptolemy.directionsService.route(request, function(response, status) {
	//     	if (status == google.maps.DirectionsStatus.OK) {
	//     		ptolemy.directionsDisplay.setDirections(response);
	//     		ptolemy.profitsRoutes(response);
	//     	}
	// 	});

	// 	clearInterval(wait);
	// };


	// var wait = setInterval(function() {
	// 	if(ptolemy.closeLotFinished === true) 
	// 	{
	// 		breakWait();
	// 	}
	// }, 10);
};

//used to calculate which highway exit the user took into town
//response (The google maps path response)
ptolemy.detectHighwayExit = function(response) {
	$.ajaxSetup( { "async": false } );

	var exitPts = [];

	$.getJSON( ptolemy.highwayExits, function( data ) {
		$.each( data, function( key, val ) {
			exitPts.push(
				[new google.maps.LatLng(val["Latitude"], val["Longitude"]), 
				 val["IdHighwayExits"],
				 val["HighwayName"],
				 val["ExitNum"]
				]
			);
	  	});
	});

	$.ajaxSetup( { "async": true } );

	//get the three possible routes
	var routes = response.routes;
	//store the legs arrays
	var legs = []
	for(var i = 0; i < routes.length; ++i) {
		legs[i] = routes[i].legs[0];
	}

	var steps = legs[0].steps;
	var points = [];
	for(var i = 0; i < steps.length; ++i) {
		var path = steps[i].path;
		for(var j = 0; j < path.length; ++j) {
			points.push(path[j]);
		}
	}
	
	var min = 100000000; // arbitrarily large number
	var minLatLng = null;
	var nearExit = null;
	var exitData = null;

	for(var i = 0; i < exitPts.length; ++i) {
		for(var j = points.length - 1; j > 0; --j) {
			var dist = google.maps.geometry.spherical.computeDistanceBetween(exitPts[i][0], points[j]);
			if(dist < min) {
				min = dist; //minimum distance away from highway exit
				minLatLng = points[j]; //save the nearest LatLng value
				nearExit = exitPts[i][0]; //save the lLatLng value
				exitData = exitPts[i];
			}
		}
	}

	// console.log(min);
	// console.log(minLatLng);
	// console.log(nearExit);
	// console.log(exitData[2] + " " + exitData[3]);
	
	//set a threshold of 25 meters
	if(min < 25) {
		return exitData;
	}
	else {
		return null;
	}
};

//calculate the walking path from parking lot to building
ptolemy.calcWalkPath = function(lot, building) {
	var request = {
		origin: lot,
		destination: building,
		travelMode: google.maps.TravelMode.WALKING
	};

	ptolemy.directionsService.route(request, function(response, status) {
		if(status == google.maps.DirectionsStatus.OK) {
			ptolemy.walkingDisplay.setOptions({
				preserveViewport: true,
				suppressMarkers: true
			});
			ptolemy.walkingDisplay.setDirections(response);
		}
	});	
}

//@start is the string describing the start location
//@end is the string describing the end location
//@response is a google maps response
//@highwayExit is an array [LatLng, IdHighwayExit, HighwayName, ExitNum]
ptolemy.profitsRoute = function(start, dest, response, highwayExit) {
	//formulate the new path based on the response and the highway exit

	//create a set of waypoints the path must reach
	var waypoints = [];

	//check that highway exit is not null
	if(highwayExit) {
		//set the highway exit as a waypoint
		waypoints.push({
			location: highwayExit[0].lat() + "," + highwayExit[0].lng(),
			stopover: false
		});
	}
	else {
		ptolemy.directionsDisplay.setDirections(response);
		return;
	}

	//get the steps after exiting the highway from table
	$.ajaxSetup( { "async": false } );

	//create the request URL
	var req = ptolemy.postExitSteps + "?highwayid=" + highwayExit[1];
	$.getJSON( req, function(data) {
		for(var i = 0; i < data.length; ++i) {
			waypoints.push({
				location: data[i]["Street"] + " Akron, OH",
				stopover: false
			});
		}
	});

	$.ajaxSetup( { "async": true } );

	var profitsReq = {
    	origin:start,
    	destination: dest,
    	provideRouteAlternatives: false,
    	waypoints: waypoints,
    	optimizeWaypoints: true,
    	travelMode: google.maps.TravelMode.DRIVING
	};

	ptolemy.directionsService.route(profitsReq, function(resp, status) {
    	if (status == google.maps.DirectionsStatus.OK) {
    		// console.log(resp);
    		ptolemy.directionsDisplay.setDirections(resp);
    	}
    	if(status == google.maps.DirectionsStatus.OVER_QUERY_LIMIT) {
    		alert("Service experience heavy traffic. Please try again in a few seconds");
    	}
	});
};

//return an 
// has form [{name, address, bldg_no}, ... ]
ptolemy.getBuildingAddress = function() {
	var buildings = [];
	$.ajaxSetup( { "async": false } );
	$.getJSON( ptolemy.buildingAddrUri, function( data ) {
		$.each( data, function( key, val ) {
	    	var bldg = {
	    		name: val["BUILDING_NAME"],
	    		address: val["STREET_ADDRESS"],
	    		bldg_no: val["BLDG_NO"],
	    		latitude: val["Latitude"],
	    		longitude: val["Longitude"],
	    		bldg_pic: val["Building_picture"]
	    	};
	    	buildings.push(bldg);
	  	});
	});
	$.ajaxSetup( { "async": true } );
	return buildings;
};

//return a json object
// has form [ lot_num:{ name, address },...]
ptolemy.getParkingAddress = function() {
	var lots = [];
	$.ajaxSetup( { "async": false } );
	$.getJSON( ptolemy.lotAddrUri, function( data ) {
		$.each( data, function( key, val ) {
	    	var lot = {
	    		num: val["Lot_num"],
	    		name: val["Lot_Name"],
	    		address: val["Address"],
	    		latitude: val["Latitude"],
	    		longitude: val["Longitude"]
	    	};
	    	lots.push(lot);
	  	});
	});
	$.ajaxSetup( { "async": true } );
	return lots;
};

//get the ideal parking
//buildingDest is the target building
ptolemy.getIdealParking = function(buildingName, hasPermit) {
	$.ajaxSetup( { "async": false } );
	req = ptolemy.idealParkingUri + "?" + "dest=" + buildingName;

	var idealLots = [];

	$.getJSON(req, function( data ) {
		// console.log(data);
		if(hasPermit)
			hasPermit = "1";
		else
			hasPermit = "0";

		for(var i = 0; i < data.length; ++i) {
			if(data[i]["HasPermit"] == hasPermit) {
				idealLots.push(data[i]);
			}
		}
	});

	$.ajaxSetup( { "async": true } );

	return idealLots;
};

//returns the nearest parking instead of the ideal
ptolemy.getNearestParking = function(buildingDest) {
	//JSON parsed object
	var lots = ptolemy.getParkingAddress();
	var dest = [];
	for(var i = 0; i < lots.length; ++i) {
		dest.push(lots[i].address + " Akron, OH");
	}

	ptolemy.calcCloseLot([buildingDest], dest);
};

ptolemy.streetView = function(marker) {
		google.maps.event.addListener(marker, 'click', function() {
			//open a panorama view
			var panoramaOptions = {
				position: marker.position,
				pov: {
				  heading: 34,
				  pitch: 10
				},
				panControl: false,
				addressControl: false,
				zoomControl: false,
				linksControl: false
			};
			var panorama = new google.maps.StreetViewPanorama(document.getElementById('ptolemy-streetview'), panoramaOptions);
			ptolemy.map.setStreetView(panorama);
	    });
};

ptolemy.codeAddress = function(address, letter) 
{
  var geocoder = new google.maps.Geocoder();
  geocoder.geocode( {address:address}, function(results, status) 
  {
    if (status == google.maps.GeocoderStatus.OK) 
    {
      ptolemy.map.setCenter(results[0].geometry.location);//center the map over the result
      //place a marker at the location
      var marker = new google.maps.Marker(
      {
          map: ptolemy.map,
          position: results[0].geometry.location,
          icon: "https://chart.googleapis.com/chart?chst=d_map_pin_letter&chld=" + letter + "|00ff00|000000"
      });
      
      google.maps.event.addListener(marker, 'click', function() {
	    //open a panorama view
	    var panoramaOptions = {
		    position: results[0].geometry.location,
		    pov: {
		      heading: 34,
		      pitch: 10
		    },
		    panControl: false,
		    addressControl: false,
		    zoomControl: false,
		    linksControl: false
		};
	  	var panorama = new google.maps.StreetViewPanorama(document.getElementById('ptolemy-streetview'), panoramaOptions);
	  	ptolemy.map.setStreetView(panorama);
	  });
	  
      ptolemy.markerArray.push(marker);

    } else {
      alert('Geocode was not successful for the following reason: ' + status);
   }
  });
};

toRadians = function(value) {
	return value * (Math.pi / 180);
};

//src: http://www.geodatasource.com/developers/javascript
ptolemy.geoDistance = function(lat1, lon1, lat2, lon2) {
	var radlat1 = Math.PI * lat1/180

    var radlat2 = Math.PI * lat2/180

    var radlon1 = Math.PI * lon1/180

    var radlon2 = Math.PI * lon2/180

    var theta = lon1-lon2

    var radtheta = Math.PI * theta/180

    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);

    dist = Math.acos(dist)
    dist = dist * 180/Math.PI
    dist = dist * 60 * 1.1515
    dist = dist * 1609;

    return dist;
};


///////////////////////////////
// IGNORE THIS CRAP
/////////////////////////////

// used for asynchronous distance matrix calculations
// required for calcCloseLot and closeLotCallback
ptolemy.closestLot = {};
ptolemy.reqStatus = null;
ptolemy.reqStatusCount = 0;
ptolemy.closeLotFinished = false;

var Lot = {
	distance: 10000, //arbitrary long distance
	distanceText: "",
	address: "" //empty at first
};


ptolemy.closeLotCallback = function(response, status) {

	if(status != google.maps.DistanceMatrixStatus.OK) {
		alert('Error was: ' + status);
	} 
	else {

		var origin = response.originAddresses;
		ptolemy.reqStatus = google.maps.DistanceMatrixStatus.OK;
		ptolemy.reqStatusCount += 1;

		for(var i = 0; i < origin.length; ++i) {
			var results = response.rows[i].elements;
			for(var j = 0; j < results.length; ++j) {
				if(results[j].distance.value < Lot.distance) {
					Lot.distance = results[j].distance.value;
					Lot.distanceText = results[j].distance.text;
					Lot.address = response.destinationAddresses[j];
					ptolemy.closestLot = Lot;
				}
			}
		}
	}
};

//calculates the closest lot and direct the user towards that lot
//is an option provided to the user but is not primary focus
ptolemy.calcCloseLot = function(origin, dest) {
	ptolemy.closeLotFinished = false;
	var service = new google.maps.DistanceMatrixService();

	//need to splice the parking to ensure URL not too long
	//when making request to google
	var destA = dest;
	var destB = dest.splice(0, dest.length / 2);
	var destC = destA.splice(0, destA.length / 2);
	var destD = destB.splice(0, destB.length / 2);

	service.getDistanceMatrix({
		origins: origin,
		destinations: destA,
		travelMode: google.maps.TravelMode.DRIVING
	}, ptolemy.closeLotCallback);

	service.getDistanceMatrix({
		origins: origin,
		destinations: destB,
		travelMode: google.maps.TravelMode.DRIVING
	}, ptolemy.closeLotCallback);

	service.getDistanceMatrix({
		origins: origin,
		destinations: destC,
		travelMode: google.maps.TravelMode.DRIVING
	}, ptolemy.closeLotCallback);

	service.getDistanceMatrix({
		origins: origin,
		destinations: destD,
		travelMode: google.maps.TravelMode.DRIVING
	}, ptolemy.closeLotCallback);

	var breakWait = function() {
		ptolemy.reqStatusCount = 0;
		clearInterval(wait);
		ptolemy.closeLotFinished = true;
		return ptolemy.closestLot;
	}

	var wait = setInterval(function() {
		if(ptolemy.reqStatus === google.maps.DistanceMatrixStatus.OK &&
		   ptolemy.reqStatusCount >= 4) 
		{
			breakWait();
		}
	}, 10);
};

ptolemy.attachInstructionText = function(marker, text) {
  google.maps.event.addListener(marker, 'click', function() {
    // Open an info window when the marker is clicked on,
    // containing the text of the step.
    ptolemy.stepDisplay.setContent(text);
    ptolemy.stepDisplay.open(ptolemy.map, marker);
  });
};


